Search in a Rotated Sorted Array
Given a sorted array which is rotated at some random pivot point find a target value.

Example: [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]

Given a target value to search, if found in the array return its index, otherwise return -1.
One can assume there are no duplicates in the array and your algorithm's runtime complexity must be in the order of O(log n).
Example:

Input: nums = [4,5,6,7,0,1,2], target = 0, Output: 4
The idea of the algorithm its the find the index of what is called the “pivot” of the rotated sorted array. 
This “pivot” is the index of the minimal element.

We create a function called get_pivot which used a divide an conquer strategy to find the pivot of the integer lists.
Then we use binary search which has a time complexity of O(logn) to find the index of the number and return.
The space complexity is O(1) since the binary search uses iteration and does not require extra storage.